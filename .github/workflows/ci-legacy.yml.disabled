name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '20.x'

jobs:
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: manito_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: Checkout code
      uses: actions/checkout@f43a0e5ff2bd294095638e18286ca9a3d1956744 # v4.1.1

    - name: Setup Node.js
      uses: actions/setup-node@b39b52d1213e96004bfcb1c61a8a6fa8ab84f3e8 # v4.0.1
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run linter
      run: npm run lint || echo "Linting not configured"

    - name: Run tests
      run: npm test
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/manito_test
        REDIS_URL: redis://localhost:6379
        NODE_ENV: test

    - name: Test coverage
      run: npm run coverage || echo "Coverage not configured"

    - name: Upload test results
      uses: actions/upload-artifact@5d5d22a31266ced268874388b861e4b58bb5c2f3 # v4.3.1
      if: always()
      with:
        name: test-results
        path: |
          coverage/
          test-results.xml

  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: test

    steps:
    - name: Checkout code
      uses: actions/checkout@f43a0e5ff2bd294095638e18286ca9a3d1956744 # v4.1.1

    - name: Setup Node.js
      uses: actions/setup-node@b39b52d1213e96004bfcb1c61a8a6fa8ab84f3e8 # v4.0.1
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Build client
      run: npm run build:client

    - name: Build server
      run: npm run build:server

    - name: Upload build artifacts
      uses: actions/upload-artifact@5d5d22a31266ced268874388b861e4b58bb5c2f3 # v4.3.1
      with:
        name: build-artifacts
        path: |
          client/dist/
          server/dist/

  docker:
    name: Docker Build
    runs-on: ubuntu-latest
    needs: [test, build]
    if: github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@f43a0e5ff2bd294095638e18286ca9a3d1956744 # v4.1.1

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@f95db51fddba0c2d1ec667646a06c2ce06100226 # v3.0.0

    - name: Login to Docker Hub
      uses: docker/login-action@343f7c4344506bcbf9b4de18042ae17996df046d # v3.0.0
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@8e5442c4ef9f78752691e2d8f8d19755c6f78e81 # v5.5.1
      with:
        images: manitodebug/manito-debug
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@2cdde995de11925a030ce8070c3d77a52ffcf1c0 # v5.3.0
      with:
        context: .
        file: ./Dockerfile.prod
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: test

    steps:
    - name: Checkout code
      uses: actions/checkout@f43a0e5ff2bd294095638e18286ca9a3d1956744 # v4.1.1

    - name: Run security audit
      run: npm audit --audit-level=moderate

    - name: Run CodeQL Analysis
      uses: github/codeql-action/analyze@1b1aada464948af03b950897e5eb522f92603cc2 # v3.24.9
      with:
        languages: javascript

  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [test, build, docker, security]
    if: github.ref == 'refs/heads/main'
    environment: production

    steps:
    - name: Checkout code
      uses: actions/checkout@f43a0e5ff2bd294095638e18286ca9a3d1956744 # v4.1.1

    - name: Deploy to production
      run: |
        echo "üöÄ Deploying to production..."
        echo "This would trigger your production deployment"
        # Add your deployment commands here
        # Examples:
        # - Deploy to AWS ECS
        # - Update Kubernetes manifests
        # - Trigger deployment webhook

    - name: Notify deployment
      run: |
        echo "‚úÖ Deployment completed successfully"
        # Add notification logic (Slack, email, etc.)

  performance:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'pull_request'

    steps:
    - name: Checkout code
      uses: actions/checkout@f43a0e5ff2bd294095638e18286ca9a3d1956744 # v4.1.1

    - name: Setup Node.js
      uses: actions/setup-node@b39b52d1213e96004bfcb1c61a8a6fa8ab84f3e8 # v4.0.1
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run performance tests
      run: |
        echo "üîç Running performance tests..."
        node scripts/test-functionality.js
        node scripts/test-dynamic-port-management.js
        echo "‚úÖ Performance tests completed"
